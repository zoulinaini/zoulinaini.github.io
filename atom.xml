<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Zou</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-09T08:30:21.983Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.Zou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>移动端适配</title>
    <link href="http://yoursite.com/2018/11/09/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"/>
    <id>http://yoursite.com/2018/11/09/移动端适配/</id>
    <published>2018-11-09T07:31:53.000Z</published>
    <updated>2018-11-09T08:30:21.983Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转自原文: <a href="https://www.w3cplus.com/css/vw-for-layout.html" target="_blank" rel="noopener">https://www.w3cplus.com/css/vw-for-layout.html</a> © w3cplus.com</p></blockquote><h3 id="Flexible承载的使命"><a href="#Flexible承载的使命" class="headerlink" title="Flexible承载的使命"></a>Flexible承载的使命</h3><hr><p>Flexible到今天也有几年的历史了，解救了很多同学针对于H5页面布局的适配问题。而这套方案也相对而言是一个较为成熟的方案。简单的回忆一下，当初为了能让页面更好的适配各种不同的终端，通过Hack手段来根据设备的dpr值相应改变<meta>标签中viewport的值：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- dpr = 1--&gt;</span> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=scale,maximum-scale=scale,minimum-scale=scale,user-scalable=no"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- dpr = 2--&gt;</span> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=0.5,maximum-scale=0.5,minimum-scale=0.5,user-scalable=no"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- dpr = 3--&gt;</span> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=0.3333333333,maximum-scale=0.3333333333,minimum-scale=0.3333333333,user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>从而让页面达么缩放的效果，也变相的实现页面的适配功能。而其主要的思想有三点：</p><ul><li>根据dpr的值来修改viewport实现1px的线</li><li>根据dpr的值来修改html的font-size，从而使用rem实现等比缩放</li><li>使用Hack手段用rem模拟vw特性</li></ul><blockquote><p>有关于Flexible方案实现适配，在2015年双十一之后做过这方面的技术文档分享，感兴趣的同学可以移步阅读《使用Flexible实现手淘H5页面的终端适配》一文。虽然Flexible解决了适配终端很多问题，但它并不是万能的，也不是最优秀的，他还是存在一些问题的，比如iframe的引用，有时候就把我们自己给埋进去了。针对其中的一些不足之处，有些同学对其进行过相关的改造，在网上搜索能找到相关的方案。</p></blockquote><p>那么时代在变化，前端技术在不断的变化，试问：Flexible还是最佳方案？Flexible还有存在的必要吗？ 最近一直在探讨这方面，这里先告诉大家Flexible已经完成了他自身的历史使命，我们可以放下Flexible，拥抱新的变化。接下来的内容，我将分享一下我最近自己探讨的新的适配方案，或许很多团队同学已经开始使用了，如果有不对之处，希望能得到大婶们的指正；如果您有更好的方案，希望能一起分享一起探讨。</p><h3 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h3><hr><p>前面给大家介绍了这个方案目前得到的支持情况以及效果。也扯了不少废话，接下来进入正题吧。</p><p>在移动端布局，我们需要面对两个最为重要的问题：</p><ul><li>各终端下的适配问题</li><li>Retina屏的细节处理</li></ul><p>不同的终端，我们面对的屏幕分辨率、DPR、1px、2x图等一系列的问题。那么这个布局方案也是针对性的解决这些问题，只不过解决这些问题不再是使用Hack手段来处理，而是直接使用原生的CSS技术来处理的</p><h3 id="适配终端"><a href="#适配终端" class="headerlink" title="适配终端"></a>适配终端</h3><hr><p>首要解决的是适配终端。回想一下，以前的Flexible方案是通过JavaScript来模拟vw的特性，那么到今天为止，vw已经得到了众多浏览器的支持，也就是说，可以直接考虑将vw单位运用于我们的适配布局中。</p><p>众所周知，vw是基于Viewport视窗的长度单位，这里的视窗（Viewport）指的就是浏览器可视化的区域，而这个可视区域是window.innerWidth/window.innerHeight的大小。用下图简单的来示意一下：</p><p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-4.png" alt="Viewport" title="Viewport"></p><blockquote><p>因为Viewport涉及到的知识点很多，要介绍清楚这方面的知识，都需要几篇文章来进行阐述。@PPK大神有两篇文章详细介绍了这方面的知识。中文可以移步这里进行阅读</p></blockquote><p>在CSS Values and Units Module Level 3中和Viewport相关的单位有四个，分别为vw、vh、vmin和vmax。</p><ul><li>vw：是Viewport’s width的简写,1vw等于window.innerWidth的1%</li><li>vh：和vw类似，是Viewport’s height的简写，1vh等于window.innerHeihgt的1%</li><li>vmin：vmin的值是当前vw和vh中较小的值</li><li>vmax：vmax的值是当前vw和vh中较大的值</li></ul><blockquote><p>vmin和vmax是根据Viewport中长度偏大的那个维度值计算出来的，如果window.innerHeight &gt; window.innerWidth则vmin取百分之一的window.innerWidth，vmax取百分之一的window.innerHeight计算。</p></blockquote><p>还是用一张图来示意吧，一图胜于千言万语：<br><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-5.png" alt=""></p><p>所以在这个方案中大胆的使用vw来替代以前Flexible中的rem缩放方案。先来回归到我们的实际业务中来。目前出视觉设计稿，我们都是使用750px宽度的，从上面的原理来看，那么100vw = 750px，即1vw = 7.5px。那么我们可以根据设计图上的px值直接转换成对应的vw值。看到这里，很多同学开始感到崩溃，又要计算，能不能简便一点，能不能再简单一点，其实是可以的，我们可以使用PostCSS的插件postcss-px-to-viewport，让我们可以直接在代码中写px，比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[w-369]</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">369px</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[w-369]</span> <span class="selector-tag">h2</span> <span class="selector-tag">span</span> &#123; </span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#FF5000</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>; </span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">#FF5000</span>; </span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">5px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PostCSS编译之后就是我们所需要的带vw代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[w-369]</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">49.2vw</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-attr">[w-369]</span> <span class="selector-tag">h2</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">   <span class="attribute">background</span>: <span class="number">#ff5000</span>;</span><br><span class="line">   <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">   <span class="attribute">display</span>: inline-block;</span><br><span class="line">   <span class="attribute">border-radius</span>: .<span class="number">53333vw</span>;</span><br><span class="line">   <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0.26667vw</span> <span class="number">0.26667vw</span> <span class="number">#ff5000</span>;</span><br><span class="line">   <span class="attribute">padding</span>: .<span class="number">26667vw</span> .<span class="number">66667vw</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-attr">[w-369]</span> <span class="selector-tag">h2</span> <span class="selector-tag">span</span>, <span class="selector-attr">[w-369]</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">2.66667vw</span>; <span class="attribute">margin-right</span>: .<span class="number">66667vw</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在实际使用的时候，你可以对该插件进行相关的参数配置：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">"postcss-px-to-viewport":</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">  viewportWidth:</span> <span class="number">750</span><span class="string">,</span></span><br><span class="line"><span class="attr">  viewportHeight:</span> <span class="number">1334</span><span class="string">,</span></span><br><span class="line"><span class="attr">  unitPrecision:</span> <span class="number">5</span><span class="string">,</span></span><br><span class="line"><span class="attr">  viewportUnit:</span> <span class="string">'vw'</span><span class="string">,</span></span><br><span class="line"><span class="attr">  selectorBlackList:</span> <span class="string">[],</span></span><br><span class="line"><span class="attr">  minPixelValue:</span> <span class="number">1</span><span class="string">,</span></span><br><span class="line"><span class="attr">  mediaQuery:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><p>假设你的设计稿不是750px而是1125px，那么你就可以修改vewportWidth的值。有关于该插件的详细介绍，可以阅读其官方使用文档</p><p>上面解决了px到vw的转换计算。那么在哪些地方可以使用vw来适配我们的页面。根据相关的测试：</p><ul><li>容器适配，可以使用vw</li><li>文本的适配，可以使用vw</li><li>大于1px的边框、圆角、阴影都可以使用vw</li><li>内距和外距，可以使用vw</li></ul><p>另外有一个细节需要特别的提出，比如我们有一个这样的设计：</p><p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-6.png" alt=""></p><p>如果我们直接使用：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[w-188-246]</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">188px</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-attr">[w-187-246]</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">187px</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最终的效果会造成[w-187-246]容器的高度小于[w-188-246]容器的高度。这个时候我们就需要考虑到容器的长宽比缩放。这方面的方案很多，但我还是推荐工具化来处理，这里推荐@一丝 姐姐写的一个PostCSS插件postcss-aspect-ratio-mini。这个插件使用很简单，不需要做任何的配置，你只需要本地安装一下就OK。使用的时候如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[aspectratio]</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>: relative; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aspectratio]</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">   <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">   <span class="attribute">display</span>: block;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">1px</span>; </span><br><span class="line">   <span class="attribute">margin-left</span>: -<span class="number">1px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aspectratio-content]</span> &#123; </span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">   <span class="attribute">top</span>: <span class="number">0</span>; </span><br><span class="line">   <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100%</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[aspectratio]</span><span class="selector-attr">[aspect-ratio="188/246"]</span>&#123; </span><br><span class="line">  <span class="attribute">aspect-ratio</span>: <span class="string">'188:246'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译出来：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">aspectratio</span>][<span class="symbol">aspect-ratio="188/246"</span>]:before &#123;</span><br><span class="line">   padding-top: 130.85106382978725%; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以完美的实现长宽比的效果。有关于这方面的原理在这里不做过多阐述，感兴趣的话可以阅读早前整理的文章:</p><ul><li><a href="https://www.w3cplus.com/css/aspect-ratio.html" target="_blank" rel="noopener">CSS实现长宽比的几种方案</a></li><li><a href="https://www.w3cplus.com/css/aspect-ratio-boxes.html" target="_blank" rel="noopener">容器长宽比</a></li><li><a href="https://www.w3cplus.com/css/experiments-in-fixed-aspect-ratios.html" target="_blank" rel="noopener">Web中如何实现纵横比</a></li><li><a href="https://www.w3cplus.com/css/css-polyfluidsizing-using-calc-vw-breakpoints-and-linear-equations.html" target="_blank" rel="noopener">实现精准的流体排版原理</a></li></ul><blockquote><p>目前采用PostCSS插件只是一个过渡阶段，在将来我们可以直接在CSS中使用aspect-ratio属性来实现长宽比。</p></blockquote><h3 id="解决1px方案"><a href="#解决1px方案" class="headerlink" title="解决1px方案"></a>解决1px方案</h3><hr><p>前面提到过，对于1px是不建议将其转换成对应的vw单位的，但在Retina下，我们始终是需要面对如何解决1px的问题。在<a href="https://www.w3cplus.com/css/fix-1px-for-retina.html" target="_blank" rel="noopener">《再谈Retina下1px的解决方案》</a>文章中提供了多种解决1px的方案。在这里的话，个人推荐另外一种解决1px的方案。依旧是使用PostCSS插件，解决1px可以使用<a href="https://github.com/jonathantneal/postcss-write-svg" target="_blank" rel="noopener">postcss-write-svg</a>。</p><p>使用postcss-write-svg你可以通过border-image或者background-image两种方式来处理。比如：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">svg</span> <span class="number">1px</span>-border &#123; </span><br><span class="line">  <span class="selector-tag">height</span>: 2<span class="selector-tag">px</span>; </span><br><span class="line">  @<span class="keyword">rect</span> &#123; </span><br><span class="line">    <span class="selector-tag">fill</span>: <span class="selector-tag">var</span>(<span class="selector-tag">--color</span>, <span class="selector-tag">black</span>); <span class="selector-tag">width</span>: 100%; <span class="selector-tag">height</span>: 50%; </span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br><span class="line">  <span class="selector-class">.example</span> &#123;</span><br><span class="line">     <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">      <span class="attribute">border-image</span>: <span class="built_in">svg</span>(1px-border param(--color #00b1ff)) <span class="number">2</span> <span class="number">2</span> stretch; </span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></p><p>这样PostCSS会自动帮你把CSS编译出来：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">1px</span> solid transparent; </span><br><span class="line">   <span class="attribute">border-image</span>: <span class="built_in">url</span>(<span class="string">"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' height='2px'%3E%3Crect fill='%2300b1ff' width='100%25' height='50%25'/%3E%3C/svg%3E"</span>) <span class="number">2</span> <span class="number">2</span> stretch; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用PostCSS的插件是不是比我们修改图片要来得简单与方便。</p><p>上面演示的是使用border-image方式，除此之外还可以使用background-image来实现。比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">svg</span> square &#123;</span><br><span class="line">   @<span class="keyword">rect</span> &#123;</span><br><span class="line">      <span class="selector-tag">fill</span>: <span class="selector-tag">var</span>(<span class="selector-tag">--color</span>, <span class="selector-tag">black</span>); <span class="selector-tag">width</span>: 100%; <span class="selector-tag">height</span>: 100%; </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-id">#example</span> &#123; </span><br><span class="line">  <span class="attribute">background</span>: white <span class="built_in">svg</span>(square param(--color #00b1ff)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译出来就是：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#example &#123;</span></span><br><span class="line">   background: white url(<span class="string">"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Crect fill='%2300b1ff' width='100%25' height='100%25'/%3E%3C/svg%3E"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方案简单易用，是我所需要的。目前测试下来，基本能达到我所需要的需求。但有一点千万别忘了，记得在<head><meta name="generator" content="Hexo 3.8.0">中添加：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="attribute">name</span>=<span class="string">"viewport"</span> <span class="attribute">content</span>=<span class="string">"width=device-width,initial-scale=1,maximum-scale=1,minimum-scale=1,user-scalable=no"</span></span><br></pre></td></tr></table></figure></head></p><p>上面阐述的是这个适配方案中所用到的技术点，简单的总结一下：</p><ul><li>使用vw来实现页面的适配，并且通过PostCSS的插件<a href="https://github.com/evrone/postcss-px-to-viewport" target="_blank" rel="noopener">postcss-px-to-viewport</a>把px转换成vw。这样的好处是，我们在撸码的时候，不需要进行任何的计算，你只需要根据设计图写px单位</li><li>为了更好的实现长宽比，特别是针对于img、vedio和iframe元素，通过PostCSS插件<a href="https://github.com/yisibl/postcss-aspect-ratio-mini" target="_blank" rel="noopener">postcss-aspect-ratio-mini</a>来实现，在实际使用中，只需要把对应的宽和高写进去即可</li><li>为了解决1px的问题，使用PostCSS插件<a href="https://github.com/jonathantneal/postcss-write-svg" target="_blank" rel="noopener">postcss-write-svg</a>,自动生成border-image或者background-image的图片</li></ul><p>这里使用了多个PostCSS的插件，其实现在有很多优秀的PostCSS插件能帮助我们解决很多问题。哪果你从未接触过有关于PostCSS相关的知识，建议你可以花点时间去学习一下，在W3cplus提供了一些有<a href="https://www.w3cplus.com/blog/tags/516.html" target="_blank" rel="noopener">关于PostCSS相关的文章</a>。如果你想系统的学习PostCSS相关的知识，推荐你购买《深入PostCSS Web设计》一书</p><h3 id="降级处理"><a href="#降级处理" class="headerlink" title="降级处理"></a>降级处理</h3><hr><p>最开始提到过，到目前为止，T30的机型中还有几款机型是不支持vw的适配方案。那么如果业务需要，应该怎么处理呢？有两种方式可以进行降级处理：</p><ul><li>CSS Houdini：通过<a href="https://github.com/w3c/css-houdini-drafts/wiki" target="_blank" rel="noopener">CSS Houdini</a>针对vw做处理，调用<a href="https://www.w3.org/TR/css-typed-om-1" target="_blank" rel="noopener">CSS Typed OM Level1</a> 提供的<a href="https://www.w3.org/TR/css-typed-om-1/#numericvalue-serialization" target="_blank" rel="noopener">CSSUnitValue API</a>。</li><li>CSS Polyfill：通过相应的Polyfill做相应的处理，目前针对于vw单位的Polyfill主要有：<a href="https://github.com/saabi/vminpoly" target="_blank" rel="noopener">vminpoly</a>、<a href="https://github.com/rodneyrehm/viewport-units-buggyfill" target="_blank" rel="noopener">Viewport Units Buggyfill</a>、<a href="https://gist.github.com/LeaVerou/1347501" target="_blank" rel="noopener">vunits.js</a>和<a href="https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills" target="_blank" rel="noopener">Modernizr</a>。个人推荐采用<a href="https://github.com/rodneyrehm/viewport-units-buggyfill" target="_blank" rel="noopener">Viewport Units Buggyfill</a></li></ul><h3 id="Viewport不足之处"><a href="#Viewport不足之处" class="headerlink" title="Viewport不足之处"></a>Viewport不足之处</h3><hr><p>采用vw来做适配处理并不是只有好处没有任何缺点。有一些细节之处还是存在一定的缺陷的。比如当容器使用vw单位，margin采用px单位时，很容易造成整体宽度超过100vw，从而影响布局效果。对于类似这样的现象，我们可以采用相关的技术进行规避。比如将margin换成padding，并且配合box-sizing。只不过这不是最佳方案，随着将来浏览器或者应用自身的Webview对calc()函数的支持之后，碰到vw和px混合使用的时候，可以结合calc()函数一起使用，这样就可以完美的解决。</p><p>另外一点，px转换成vw单位，多少还会存在一定的像素差，毕竟很多时候无法完全整除。</p><p>到目前为止，我发现的两个不足之处。或许在后面的使用当中，还会碰到一些其他不为人之的坑。事实也是如此，不管任何方案，踩得坑越多，该方案也越来越强大。希望喜欢这个适配方案的同学和我一起踩坑，让其更为完善。</p><h3 id="如何判断自己的应用是否支持"><a href="#如何判断自己的应用是否支持" class="headerlink" title="如何判断自己的应用是否支持"></a>如何判断自己的应用是否支持</h3><hr><p>虽然该文的示例，进行了多方面的测试。但很多同学还是会担忧自己的APP应用是否支持该方案，而不敢大胆尝试或者使用。其实不必要这么担心，你可以拿自己的设备，或者应用扫描下面的二维码：著作权归作者所有。<br><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-7.png" alt=""></p><p>当页面跑完测试之后，找到对应的Values and Units列表项：</p><p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-8.png" alt=""></p><p>如果vw栏是绿色代表你的设备或应用支持该方案；反之则不支持。另外你也可以经常关注<a href="https://github.com/airen/css3test" target="_blank" rel="noopener">css3test</a>相关的更新，后面将会根据相关的规范更新测试代码，让你能快速掌握哪些属性可以大胆使用。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>H5页面的适配方案总是令人蛋疼的，事实上页面的布局总是令人蛋疼的。但技术是不断革新的，我们可以随着保持对新技术的关注，尝试这些新特性运用到实际项目中，只有这样，我们解决问题的方案才会越来越完善。</p><p>到写这篇文章为止，虽然还有那么一两款机型不支持vw，但并不影响我们去使用。只有不断去尝试，才会有进步。在此，希望大家大胆尝试，一起让该方案变得更完美。如果你有更好的建议，或者你踩到任何坑，欢迎在下面的评论中与我分享，或者发邮件给我一起讨论。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转自原文: &lt;a href=&quot;https://www.w3cplus.com/css/vw-for-layout.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.w3cplus.com/css/vw
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博客</title>
    <link href="http://yoursite.com/2018/11/09/%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/11/09/博客/</id>
    <published>2018-11-09T06:53:10.000Z</published>
    <updated>2018-11-09T07:19:00.230Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p><code>1. npm install -g hexo-cli</code></p><p><code>2. hexo init</code></p><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>主题地址 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p><p><code>3. git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><blockquote><p>打开 myblog/_config.yml   更改theme </p></blockquote><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><p><code>hexo s --debug</code></p><h3 id="部署到Github-Pages"><a href="#部署到Github-Pages" class="headerlink" title="部署到Github Pages"></a>部署到Github Pages</h3><p>在根目录下_config.yml里面任意位置新增以下语句<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  # 填上你自己的仓库名，注意后面有<span class="built_in">`.git`</span></span><br><span class="line">  <span class="attribute">repository</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:your_username/your_username.github.io.git </span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></p><p>好了现在可以部署到Github了。输入npm install hexo-deployer-git –save，然后再执行hexo d来部署。否则会出现Deployer not found:git的错误。耐心等待，出现Deployer done: git表示你部署成功了！输入网址your_username.github.io去看看吧。一般来说如果出现莫名的问题，按照以下步骤即可解决。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">删除<span class="selector-class">.deploy_git</span>文件夹</span><br><span class="line"><span class="selector-tag">hexo</span> <span class="selector-tag">clean</span></span><br><span class="line"><span class="selector-tag">hexo</span> <span class="selector-tag">g</span></span><br><span class="line"><span class="selector-tag">hexo</span> <span class="selector-tag">d</span></span><br></pre></td></tr></table></figure></p><blockquote><p><a href="https://www.jianshu.com/p/35e197cb1273" target="_blank" rel="noopener">https://www.jianshu.com/p/35e197cb1273</a></p></blockquote><blockquote><p><a href="https://www.cnblogs.com/sun-haiyu/p/7027093.html" target="_blank" rel="noopener">https://www.cnblogs.com/sun-haiyu/p/7027093.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装hexo&quot;&gt;&lt;a href=&quot;#安装hexo&quot; class=&quot;headerlink&quot; title=&quot;安装hexo&quot;&gt;&lt;/a&gt;安装hexo&lt;/h3&gt;&lt;p&gt;&lt;code&gt;1. npm install -g hexo-cli&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;2
      
    
    </summary>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>打死你个龟孙</title>
    <link href="http://yoursite.com/2018/11/08/%E4%BB%8A%E5%A4%A9%E6%98%AF%E4%B8%AA%E5%A5%BD%E6%97%A5%E5%AD%90/"/>
    <id>http://yoursite.com/2018/11/08/今天是个好日子/</id>
    <published>2018-11-08T10:41:38.000Z</published>
    <updated>2018-11-08T10:43:27.145Z</updated>
    
    <content type="html"><![CDATA[<h2 id="打死你个龟孙"><a href="#打死你个龟孙" class="headerlink" title="打死你个龟孙"></a>打死你个龟孙</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">dsa</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;打死你个龟孙&quot;&gt;&lt;a href=&quot;#打死你个龟孙&quot; class=&quot;headerlink&quot; title=&quot;打死你个龟孙&quot;&gt;&lt;/a&gt;打死你个龟孙&lt;/h2&gt;&lt;figure class=&quot;highlight ebnf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
    
      <category term="打死你个龟孙" scheme="http://yoursite.com/tags/%E6%89%93%E6%AD%BB%E4%BD%A0%E4%B8%AA%E9%BE%9F%E5%AD%99/"/>
    
  </entry>
  
  <entry>
    <title>记录你的美</title>
    <link href="http://yoursite.com/2018/11/08/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%BC%80%E5%A7%8B/"/>
    <id>http://yoursite.com/2018/11/08/第一次开始/</id>
    <published>2018-11-08T08:08:57.083Z</published>
    <updated>2018-11-08T10:00:20.887Z</updated>
    
    <content type="html"><![CDATA[<h3 id="终于好了"><a href="#终于好了" class="headerlink" title="终于好了"></a>终于好了</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;终于好了&quot;&gt;&lt;a href=&quot;#终于好了&quot; class=&quot;headerlink&quot; title=&quot;终于好了&quot;&gt;&lt;/a&gt;终于好了&lt;/h3&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
